openapi: 3.0.0
info:
  title: 'Q Laravel Skeleton API'
  version: '0.9'
paths:
  /api/v1/authors:
    get:
      tags:
        - Authors
      summary: 'Get list of authors'
      operationId: getAuthors
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  author: { $ref: '#/components/schemas/AuthorResource' }
                type: object
        '400':
          description: 'Bad Request'
        '401':
          description: Unauthorized
      security:
        -
          sanctum: []
    post:
      tags:
        - Authors
      summary: 'Create new author'
      operationId: createAuthor
      requestBody:
        description: 'Create new author'
        required: true
        content:
          application/json:
            schema:
              required:
                - first_name
                - last_name
              properties:
                first_name:
                  type: string
                  example: John
                last_name:
                  type: string
                  example: Doe
                birthday:
                  type: string
                  example: '1980-01-23'
                biography:
                  type: string
                  example: 'John Doe was amazing author who ...'
                place_of_birth:
                  type: string
                  example: London
              type: object
      responses:
        '201':
          description: 'Author created successfully'
          content:
            application/json:
              schema:
                properties:
                  author: { $ref: '#/components/schemas/AuthorResource' }
                type: object
        '400':
          description: 'Bad Request'
        '401':
          description: Unauthorized
        '422':
          description: 'Validation failed'
      security:
        -
          sanctum: []
  '/api/v1/authors/{author}':
    get:
      tags:
        - Authors
      summary: 'Get author'
      operationId: getAuthor
      parameters:
        -
          name: author
          in: path
          description: 'Author id'
          required: true
          example: 1
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  author: { $ref: '#/components/schemas/AuthorResource' }
                type: object
        '400':
          description: 'Bad Request'
        '401':
          description: Unauthorized
        '404':
          description: 'Not found'
      security:
        -
          sanctum: []
    put:
      tags:
        - Authors
      summary: 'Update existing author'
      operationId: updateAuthor
      parameters:
        -
          name: author
          in: path
          description: 'Author id'
          required: true
          example: 1
      requestBody:
        description: 'Update existing author'
        required: true
        content:
          application/json:
            schema:
              required:
                - first_name
                - last_name
              properties:
                first_name:
                  type: string
                  example: John
                last_name:
                  type: string
                  example: Doe
                birthday:
                  type: string
                  example: '1980-01-23'
                biography:
                  type: string
                  example: 'John Doe was amazing author who ...'
                place_of_birth:
                  type: string
                  example: London
              type: object
      responses:
        '200':
          description: 'Author updated successfully'
          content:
            application/json:
              schema:
                properties:
                  author: { $ref: '#/components/schemas/AuthorResource' }
                type: object
        '400':
          description: 'Bad Request'
        '401':
          description: Unauthorized
        '404':
          description: 'Not found'
        '422':
          description: 'Validation failed'
      security:
        -
          sanctum: []
    delete:
      tags:
        - Authors
      summary: 'Delete author'
      operationId: deleteAuthor
      parameters:
        -
          name: author
          in: path
          description: 'Author id'
          required: true
          example: 1
      responses:
        '204':
          description: Deleted
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Author deleted.' }
                type: object
        '400':
          description: 'Bad Request'
        '401':
          description: Unauthorized
        '404':
          description: 'Not found'
      security:
        -
          sanctum: []
  /api/v1/books:
    get:
      tags:
        - Books
      summary: 'Get list of books'
      operationId: getBooks
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  book: { $ref: '#/components/schemas/BookResource' }
                type: object
        '400':
          description: 'Bad Request'
        '401':
          description: Unauthorized
      security:
        -
          sanctum: []
    post:
      tags:
        - Books
      summary: 'Create new book'
      operationId: createBook
      requestBody:
        description: 'Create new book'
        required: true
        content:
          application/json:
            schema:
              required:
                - isbn
                - title
              properties:
                isbn:
                  type: string
                  example: 978-92-95055-02-5
                title:
                  type: string
                  example: 'How to tie your shoes'
                release_date:
                  type: string
                  example: '1999-11-25'
                format:
                  type: string
                  example: PDF
                pages:
                  type: integer
                  example: '218'
                publisher_id:
                  type: integer
                  example: '1'
              type: object
      responses:
        '201':
          description: 'Book created successfully'
          content:
            application/json:
              schema:
                properties:
                  book: { $ref: '#/components/schemas/BookResource' }
                type: object
        '400':
          description: 'Bad Request'
        '401':
          description: Unauthorized
        '422':
          description: 'Validation failed'
      security:
        -
          sanctum: []
  '/api/v1/books/{book}':
    get:
      tags:
        - Books
      summary: 'Get book'
      operationId: getBook
      parameters:
        -
          name: book
          in: path
          description: 'Book id'
          required: true
          example: 1
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  book: { $ref: '#/components/schemas/BookResource' }
                type: object
        '400':
          description: 'Bad Request'
        '401':
          description: Unauthorized
        '404':
          description: 'Not found'
      security:
        -
          sanctum: []
    put:
      tags:
        - Books
      summary: 'Update existing book'
      operationId: updateBook
      parameters:
        -
          name: book
          in: path
          description: 'Book id'
          required: true
          example: 1
      requestBody:
        description: 'Update existing book'
        required: true
        content:
          application/json:
            schema:
              required:
                - isbn
                - title
              properties:
                isbn:
                  type: string
                  example: 978-92-95055-02-5
                title:
                  type: string
                  example: 'How to tie your shoes'
                release_date:
                  type: string
                  example: '1999-11-25'
                format:
                  type: string
                  example: PDF
                pages:
                  type: integer
                  example: '218'
                publisher_id:
                  type: integer
                  example: '1'
              type: object
      responses:
        '200':
          description: 'Book updated successfully'
          content:
            application/json:
              schema:
                properties:
                  book: { $ref: '#/components/schemas/BookResource' }
                type: object
        '400':
          description: 'Bad Request'
        '401':
          description: Unauthorized
        '404':
          description: 'Not found'
        '422':
          description: 'Validation failed'
      security:
        -
          sanctum: []
    delete:
      tags:
        - Books
      summary: 'Delete book'
      operationId: deleteBook
      parameters:
        -
          name: book
          in: path
          description: 'Book id'
          required: true
          example: 1
      responses:
        '204':
          description: Deleted
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Book deleted.' }
                type: object
        '400':
          description: 'Bad Request'
        '401':
          description: Unauthorized
        '404':
          description: 'Not found'
      security:
        -
          sanctum: []
  /api/v1/publishers:
    get:
      tags:
        - Publishers
      summary: 'Get list of publishers'
      operationId: getPublishers
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  publisher: { $ref: '#/components/schemas/PublisherResource' }
                type: object
        '400':
          description: 'Bad Request'
        '401':
          description: Unauthorized
      security:
        -
          sanctum: []
    post:
      tags:
        - Publishers
      summary: 'Create new publisher'
      operationId: createPublisher
      requestBody:
        description: 'Create new publisher'
        required: true
        content:
          application/json:
            schema:
              required:
                - name
              properties:
                name:
                  type: string
                  example: 'Q Publishing'
                address:
                  type: string
                  example: 'Some address 33'
              type: object
      responses:
        '201':
          description: 'Publisher created successfully'
          content:
            application/json:
              schema:
                properties:
                  publisher: { $ref: '#/components/schemas/PublisherResource' }
                type: object
        '400':
          description: 'Bad Request'
        '401':
          description: Unauthorized
        '422':
          description: 'Validation failed'
      security:
        -
          sanctum: []
  '/api/v1/publishers/{publisher}':
    get:
      tags:
        - Publishers
      summary: 'Get publisher'
      operationId: getPublisher
      parameters:
        -
          name: publisher
          in: path
          description: 'Publisher id'
          required: true
          example: 1
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  publisher: { $ref: '#/components/schemas/PublisherResource' }
                type: object
        '400':
          description: 'Bad Request'
        '401':
          description: Unauthorized
        '404':
          description: 'Not found'
      security:
        -
          sanctum: []
    put:
      tags:
        - Publishers
      summary: 'Update existing publisher'
      operationId: updatePublisher
      parameters:
        -
          name: publisher
          in: path
          description: 'Publisher id'
          required: true
          example: 1
      requestBody:
        description: 'Update existing publisher'
        required: true
        content:
          application/json:
            schema:
              required:
                - name
              properties:
                name:
                  type: string
                  example: 'Q Publishing'
                address:
                  type: string
                  example: 'Some address 33'
              type: object
      responses:
        '200':
          description: 'Publisher updated successfully'
          content:
            application/json:
              schema:
                properties:
                  publisher: { $ref: '#/components/schemas/PublisherResource' }
                type: object
        '400':
          description: 'Bad Request'
        '401':
          description: Unauthorized
        '404':
          description: 'Not found'
        '422':
          description: 'Validation failed'
      security:
        -
          sanctum: []
    delete:
      tags:
        - Publishers
      summary: 'Delete publisher'
      operationId: deletePublisher
      parameters:
        -
          name: publisher
          in: path
          description: 'Publisher id'
          required: true
          example: 1
      responses:
        '204':
          description: Deleted
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Publisher deleted.' }
                type: object
        '400':
          description: 'Bad Request'
        '401':
          description: Unauthorized
        '404':
          description: 'Not found'
      security:
        -
          sanctum: []
  /api/v1/tags:
    get:
      tags:
        - Tags
      summary: 'Get list of tags'
      operationId: getTags
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  tag: { $ref: '#/components/schemas/TagResource' }
                type: object
        '400':
          description: 'Bad Request'
        '401':
          description: Unauthorized
      security:
        -
          sanctum: []
    post:
      tags:
        - Tags
      summary: 'Create new tag'
      operationId: createTag
      requestBody:
        description: 'Create new tag'
        required: true
        content:
          application/json:
            schema:
              required:
                - name
              properties:
                name:
                  type: string
                  example: Author
              type: object
      responses:
        '201':
          description: 'Tag created successfully'
          content:
            application/json:
              schema:
                properties:
                  tag: { $ref: '#/components/schemas/TagResource' }
                type: object
        '400':
          description: 'Bad Request'
        '422':
          description: 'Validation failed'
      security:
        -
          sanctum: []
  '/api/v1/tags/{tag}':
    get:
      tags:
        - Tags
      summary: 'Get tag data'
      operationId: getTag
      parameters:
        -
          name: tag
          in: path
          description: 'Tag id'
          required: true
          example: 1
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  tag: { $ref: '#/components/schemas/TagResource' }
                type: object
        '400':
          description: 'Bad Request'
        '401':
          description: Unauthorized
        '404':
          description: 'Not found'
      security:
        -
          sanctum: []
    put:
      tags:
        - Tags
      summary: 'Update existing tag'
      operationId: updateTag
      parameters:
        -
          name: tag
          in: path
          description: 'Tag id'
          required: true
          example: 1
      requestBody:
        description: 'Update existing tag'
        required: true
        content:
          application/json:
            schema:
              required:
                - name
              properties:
                name:
                  type: string
                  example: Author
              type: object
      responses:
        '200':
          description: 'Tag updated successfully'
          content:
            application/json:
              schema:
                properties:
                  tag: { $ref: '#/components/schemas/TagResource' }
                type: object
        '400':
          description: 'Bad Request'
        '401':
          description: Unauthorized
        '404':
          description: 'Not found'
        '422':
          description: 'Validation failed'
      security:
        -
          sanctum: []
    delete:
      tags:
        - Tags
      summary: 'Delete tag'
      operationId: deleteTag
      parameters:
        -
          name: tag
          in: path
          description: 'Tag id'
          required: true
          example: 1
      responses:
        '204':
          description: Deleted
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Tag deleted.' }
                type: object
        '400':
          description: 'Bad Request'
        '401':
          description: Unauthorized
        '404':
          description: 'Not found'
      security:
        -
          sanctum: []
  '/api/v1/users/{user}/tags/{tag}':
    post:
      tags:
        - Users
      summary: 'Add tag for user'
      operationId: addUserTag
      parameters:
        -
          name: user
          in: path
          description: 'User id'
          required: true
          example: 1
        -
          name: tag
          in: path
          description: 'Tag id'
          required: true
          example: 1
      responses:
        '200':
          description: 'Tag added successfully'
          content:
            application/json:
              schema:
                properties:
                  user: { $ref: '#/components/schemas/UserResource' }
                type: object
        '400':
          description: 'Bad Request'
        '404':
          description: 'Not found'
      security:
        -
          sanctum: []
    delete:
      tags:
        - Users
      summary: 'Remove tag from user'
      operationId: removeUser
      parameters:
        -
          name: user
          in: path
          description: 'User id'
          required: true
          example: 1
        -
          name: tag
          in: path
          description: 'Tag id'
          required: true
          example: 1
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                properties:
                  user: { $ref: '#/components/schemas/UserResource' }
                type: object
        '400':
          description: 'Bad Request'
        '401':
          description: Unauthorized
        '404':
          description: 'Not found'
      security:
        -
          sanctum: []
  /api/v1/users:
    get:
      tags:
        - Users
      summary: 'Get list of users'
      operationId: getUsersV1
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  user: { $ref: '#/components/schemas/UserResource' }
                type: object
        '400':
          description: 'Bad Request'
        '401':
          description: Unauthorized
      security:
        -
          sanctum: []
    post:
      tags:
        - Users
      summary: 'Create new user'
      operationId: createUserV1
      requestBody:
        description: 'Create new user'
        required: true
        content:
          application/json:
            schema:
              required:
                - first_name
                - last_name
                - email
                - password
              properties:
                first_name:
                  type: string
                  example: John
                last_name:
                  type: string
                  example: Doe
                email:
                  type: string
                  example: john.doe@q.agency
                password:
                  type: string
                  example: secretPassword
              type: object
      responses:
        '201':
          description: 'User created successfully'
          content:
            application/json:
              schema:
                properties:
                  user: { $ref: '#/components/schemas/UserResource' }
                type: object
        '400':
          description: 'Bad Request'
        '422':
          description: 'Validation failed'
  '/api/v1/users/{user}':
    get:
      tags:
        - Users
      summary: 'Get user data'
      operationId: getUserV1
      parameters:
        -
          name: user
          in: path
          description: 'User id'
          required: true
          example: 1
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  user: { $ref: '#/components/schemas/UserResource' }
                type: object
        '400':
          description: 'Bad Request'
        '401':
          description: Unauthorized
        '404':
          description: 'Not found'
      security:
        -
          sanctum: []
    put:
      tags:
        - Users
      summary: 'Update existing user'
      operationId: updateUserV1
      parameters:
        -
          name: user
          in: path
          description: 'User id'
          required: true
          example: 1
      requestBody:
        description: 'Update existing user'
        required: true
        content:
          application/json:
            schema:
              required:
                - first_name
                - last_name
                - email
                - password
              properties:
                first_name:
                  type: string
                  example: John
                last_name:
                  type: string
                  example: Doe
                email:
                  type: string
                  example: john.doe@q.agency
                password:
                  type: string
                  example: secretPassword
              type: object
      responses:
        '200':
          description: 'User updated successfully'
          content:
            application/json:
              schema:
                properties:
                  user: { $ref: '#/components/schemas/UserResource' }
                type: object
        '400':
          description: 'Bad Request'
        '401':
          description: Unauthorized
        '422':
          description: 'Validation failed'
        '404':
          description: 'Not found'
      security:
        -
          sanctum: []
    delete:
      tags:
        - Users
      summary: 'Delete user'
      operationId: deleteUserV1
      parameters:
        -
          name: user
          in: path
          description: 'User id'
          required: true
          example: 1
      responses:
        '204':
          description: Deleted
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'User deleted.' }
                type: object
        '400':
          description: 'Bad Request'
        '401':
          description: Unauthorized
        '404':
          description: 'Not found'
      security:
        -
          sanctum: []
  /api/v2/users:
    get:
      tags:
        - Users
      summary: 'Get list of users'
      operationId: getUsersV2
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  user: { $ref: '#/components/schemas/UserResource' }
                type: object
        '400':
          description: 'Bad Request'
        '401':
          description: Unauthorized
      security:
        -
          sanctum: []
    post:
      tags:
        - Users
      summary: 'Create new user'
      operationId: createUserV2
      requestBody:
        description: 'Create new user'
        required: true
        content:
          application/json:
            schema:
              required:
                - first_name
                - last_name
                - email
                - password
              properties:
                first_name:
                  type: string
                  example: John
                last_name:
                  type: string
                  example: Doe
                email:
                  type: string
                  example: john.doe@q.agency
                password:
                  type: string
                  example: secretPassword
              type: object
      responses:
        '201':
          description: 'User created successfully'
          content:
            application/json:
              schema:
                properties:
                  user: { $ref: '#/components/schemas/UserResource' }
                type: object
        '400':
          description: 'Bad Request'
        '422':
          description: 'Validation failed'
  '/api/v2/users/{user}':
    get:
      tags:
        - Users
      summary: 'Get user data'
      operationId: getUserV2
      parameters:
        -
          name: user
          in: path
          description: 'User id'
          required: true
          example: 1
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  user: { $ref: '#/components/schemas/UserResource' }
                type: object
        '400':
          description: 'Bad Request'
        '401':
          description: Unauthorized
        '404':
          description: 'Not found'
      security:
        -
          sanctum: []
    put:
      tags:
        - Users
      summary: 'Update existing user'
      operationId: updateUserV2
      parameters:
        -
          name: user
          in: path
          description: 'User id'
          required: true
          example: 1
      requestBody:
        description: 'Update existing user'
        required: true
        content:
          application/json:
            schema:
              required:
                - first_name
                - last_name
                - email
                - password
              properties:
                first_name:
                  type: string
                  example: John
                last_name:
                  type: string
                  example: Doe
                email:
                  type: string
                  example: john.doe@q.agency
                password:
                  type: string
                  example: secretPassword
              type: object
      responses:
        '200':
          description: 'User updated successfully'
          content:
            application/json:
              schema:
                properties:
                  user: { $ref: '#/components/schemas/UserResource' }
                type: object
        '400':
          description: 'Bad Request'
        '401':
          description: Unauthorized
        '422':
          description: 'Validation failed'
        '404':
          description: 'Not found'
      security:
        -
          sanctum: []
    delete:
      tags:
        - Users
      summary: 'Delete user'
      operationId: deleteUserV2
      parameters:
        -
          name: user
          in: path
          description: 'User id'
          required: true
          example: 1
      responses:
        '204':
          description: Deleted
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'User deleted.' }
                type: object
        '400':
          description: 'Bad Request'
        '401':
          description: Unauthorized
        '404':
          description: 'Not found'
      security:
        -
          sanctum: []
  /api/v1/reset-password:
    post:
      tags:
        - Authentication
      summary: 'Send password reset link'
      description: 'Sends password reset link'
      operationId: forgotPassword
      requestBody:
        description: 'Send password reset link'
        required: true
        content:
          application/json:
            schema:
              required:
                - email
              properties:
                email:
                  type: string
                  example: john.doe@q.agency
              type: object
      responses:
        '201':
          description: 'Password reset link sent successfully'
        '400':
          description: 'Bad Request'
        '403':
          description: Forbidden
        '422':
          description: 'Validation failed'
  /api/v1/login:
    post:
      tags:
        - Authentication
      summary: 'Authenticate user'
      description: 'Authenticate existing user'
      operationId: loginUser
      requestBody:
        description: 'Login existing user'
        required: true
        content:
          application/json:
            schema:
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  example: john.doe@q.agency
                password:
                  type: string
                  example: secretPassword
              type: object
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                properties:
                  token: { type: string, example: 1|HM3l3TpqlOlOxMwMeFlzaVorpgyR0UFJzlPTHHdA }
                  token_type: { type: string, example: Bearer }
                  user: { $ref: '#/components/schemas/UserResource' }
                type: object
  /api/v1/logout:
    post:
      tags:
        - Authentication
      summary: 'Logout user'
      description: 'Logout current user'
      operationId: logoutUser
      responses:
        '200':
          description: 'Successful operation'
        '400':
          description: 'Bad Request'
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
      security:
        -
          sanctum: []
  '/api/v1/reset-password/{token}':
    put:
      tags:
        - Authentication
      summary: 'Update password'
      description: 'Update password'
      operationId: resetPassword
      parameters:
        -
          name: token
          in: path
          description: 'Token string'
          required: true
          schema:
            type: string
            example: 1|HM3l3TpqlOlOxMwMeFlzaVorpgyR0UFJzlPTHHdA
      requestBody:
        description: 'Update password'
        required: true
        content:
          application/json:
            schema:
              required:
                - email
                - password
                - password_confirmation
              properties:
                email:
                  type: string
                  example: john.doe@q.agency
                password:
                  type: string
                  example: secretPassword
                password_confirmation:
                  type: string
                  example: secretPassword
              type: object
      responses:
        '201':
          description: 'User created successfully'
        '400':
          description: 'Bad Request'
        '403':
          description: Forbidden
        '422':
          description: 'Validation failed'
components:
  schemas:
    AuthorResource:
      description: 'Class AuthorResource'
      properties:
        id:
          type: integer
          default: 1
        first_name:
          type: string
          default: John
        last_name:
          type: string
          default: Doe
        birthday:
          type: string
          default: '1980-01-23'
        biography:
          type: string
          default: 'John Doe was amazing author who ...'
        place_of_birth:
          type: string
          default: London
      type: object
    BookResource:
      description: 'Class BookResource'
      properties:
        id:
          type: integer
          default: 1
        isbn:
          type: string
          default: 978-92-95055-02-5
        title:
          type: string
          default: 'How to tie your shoes'
        release_date:
          type: string
          default: '1999-25-11'
        format:
          type: string
          default: PDF
        pages:
          type: integer
          default: '218'
        publisher:
          $ref: '#/components/schemas/PublisherResource'
      type: object
    PublisherResource:
      description: 'Class PublisherResource'
      properties:
        id:
          type: integer
          default: 1
        name:
          type: string
          default: 'Q Books Ltd'
        address:
          type: string
          default: '5th Avenue, LA'
        books:
          $ref: '#/components/schemas/BookResource'
      type: object
    TagResource:
      description: 'Class TagResource'
      properties:
        id:
          type: integer
          default: 1
        name:
          type: string
          default: Author
      type: object
    UserResource:
      description: 'Class UserResource'
      properties:
        id:
          type: integer
          default: 1
        first_name:
          type: string
          default: John
        last_name:
          type: string
          default: Doe
        email:
          type: string
          default: john.doe@q.agency
      type: object
  responses:
    '401':
      description: Unauthorized
      content:
        application/json:
          schema:
            properties:
              message:
                type: string
                example: 'Invalid credentials'
              errors:
                type: object
                example: null
            type: object
